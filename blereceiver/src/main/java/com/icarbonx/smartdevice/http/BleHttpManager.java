package com.icarbonx.smartdevice.http;

import android.Manifest;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Build;
import android.support.annotation.RequiresPermission;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import com.google.gson.Gson;
import com.icarbonx.smartdevice.common.PermissionRequestCode;
import com.icarbonx.smartdevice.ble.manager.BleDevice;

import java.io.IOException;
import java.util.ArrayList;

import okhttp3.Call;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * Manage uploading the bluetooth advertised data.
 */
public class BleHttpManager {
    private static BleHttpManager mBleHttpManager;
    //Activity context
    private Context mContext;
    //The upload data
    private String mDataBody;
    //Upload result callback
    private  IBleHttpResult mIBleHttpResult;
    //The call excute request
    private Call mRequestingCall;

    private final String URL = "http://192.168.101.131/test2/Devices";

    private final MediaType JSON
            = MediaType.parse("application/json; charset=utf-8");

    /**
     * Bluetooth LE data upload callbacks. Upload results are reported using these callbacks.
     */
    public interface IBleHttpResult{
        void onSuccess();
        void onFail();
    }

    /**
     * Get the instance of BleHttpManager
     *
     * @param context Context
     * @return BleHttpManager object
     */
    public static BleHttpManager getInstance(Context context) {
        if (mBleHttpManager!=null){
            return mBleHttpManager;
        }

        mBleHttpManager = new BleHttpManager(context);
        return mBleHttpManager;
    }

    private BleHttpManager(Context context){
        this.mContext = context;
        checkRequestedPermissions();
    }

    /**
     * Set PostBody to server
     * @param jsonData {@code jsonData} is generated by{@link Gson#toJson(Object)}. The Object is {@link BleDevice}.
     */
    public void SetDataBody(String jsonData){
        this.mDataBody = jsonData;
        Gson gson;
        BleDevice bleDevice;
    }

    /**
     * Set the upload callback.
     * @param iBleHttpResult {@link IBleHttpResult}
     */
    public void setIBleHttpResult(IBleHttpResult iBleHttpResult){
        this.mIBleHttpResult = iBleHttpResult;
    }

    /**
     * Upload the setted data to server.
     */
    public void upload(){
        if(!isNetworkAvailable()){
            mIBleHttpResult.onFail();
            return;
        }
//        registerNetstate();

        RequestBody requestBody = RequestBody.create(JSON, this.mDataBody);

        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(URL)
                .post(requestBody)
                .build();
        Response response = null;
        try {
            mRequestingCall = client.newCall(request);
            response = mRequestingCall.execute();
        } catch (IOException e) {
            mIBleHttpResult.onFail();
            return;
        }

        if (response.isSuccessful()) {
            mIBleHttpResult.onSuccess();
            Log.e("reps", response.message());
        } else {
            mIBleHttpResult.onFail();
            Log.e("repsf", response.message());
        }
    }

    /**
     * Release resources
     */
    public void release(){
        unregisterNetstate();
        mRequestingCall.cancel();

        mRequestingCall = null;
        mBleHttpManager = null;
    }

    /**
     * Request internet permissions.
     * Check if network is closed, if not request to open
     * @return {@code false} if network is closed,{@code true} otherwise.
     */
    private void checkRequestedPermissions(){
        //If sdk version is less than 23(android6.0), no need to ask for permissions.
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M){
                return;
        }

        String[] permissions={Manifest.permission.INTERNET,Manifest.permission.ACCESS_NETWORK_STATE};
        ArrayList<String> unGtantedPermissions = new ArrayList<>();
        for(String p:permissions){
            //Check if permission is granted.
            if(ContextCompat.checkSelfPermission(mContext,p)!= PackageManager.PERMISSION_GRANTED){
                unGtantedPermissions.add(p);
            }
        }
        //If there is ungranted permissions, ask for it.
        if (unGtantedPermissions.size()>0){
            ActivityCompat.requestPermissions((Activity) mContext,(String[])unGtantedPermissions.toArray(), PermissionRequestCode.NETWORK_PERMMISION_REQUEST);
        }
    }

    /**
     * Check network is available.
     * @return {@code true} if the network is available, {@code false} otherwise
     */
    @RequiresPermission(android.Manifest.permission.ACCESS_NETWORK_STATE)
    private boolean isNetworkAvailable(){
        ConnectivityManager connectivityManager = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();

        //Network is available
        if (networkInfo != null && networkInfo.isAvailable()) {
            return true;
        }
        return false;
    }

    /**
     * Unregister net change receiver
     */
    private void unregisterNetstate(){
        this.mContext.unregisterReceiver(netChangeReceiver);
    }

    /**
     * Register net change receiver
     */
    private void registerNetstate(){
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        this.mContext.registerReceiver(netChangeReceiver, intentFilter);
    }

    /**
     * Net change broadcast receiver
     */
    private BroadcastReceiver netChangeReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {

        }
    };
}
